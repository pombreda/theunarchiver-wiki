#summary Reverse-engineered specs for the Cynaide algorithm from StuffIt X

= Introduction =

Cyanide is a compression algorithm used by the sitx format. It is block-based, using BWT combined with M1FF2, ternary coding and range coding. It is likely based on the paper 
[http://www.mathematik.uni-bielefeld.de/sfb343/preprints/pr99133.ps.gz "One attempt of a compression algorithm using the BWT"] by Bernhard Balkenhol and Yuri M. Shtarkov.

= Decoding =

== Block structure==

The data stream is made up of blocks of varying size. Each block begins with a block header, followed by the data stream from the range coder. The header looks as follows:

|| *Offset * || *Size* || *Meaning* ||
|| 0 || 1 || Marker byte. ||
|| 1 || 4? || Block size ||
|| 5 || 4? || Index of first byte ||
|| 9 || 1 || Number of symbols ||

All values are big-endian. The marker byte is 0x77 for each block containing data, and 0xff at the end of the stream (in this case, the rest of the fields are not included).

== Ternary coder ==

The data is encoded as a "ternary sequence" as described in the paper by Balkenhol and Shtarkov. In practice this means that the data stream is split into two interleaved streams: In the first one, all values larger than 1 are replaced by 2, and the second one contains the replaced values. All values are encoded using Dmitry Subbotin's carryless rangecoder (see SitxRangeCoder).

=== Reading the ternary sequence ===

The ternary sequence is encoded using a Markov chain of order 3. This means that the three ternary symbols preceding the current one determine the frequencies used for the range coder. This would normally mean that there are 27 different sets of frequencies, but certain Markov contexts are grouped together, giving 14 different sets of frequencies. The grouping is different from the one persented in the paper, and is as follows:

|| *Context* || *Group*|| *Context* || *Group*|| *Context* || *Group* ||
|| 000 || 0 || 001 || 1 || 002 || 2 ||
|| 010 || 3 || 011 || 4 || 012 || 5 ||
|| 020 || 6 || 021 || 7 || 022 || 8 ||
|| 100 || 3 || 101 || 9 || 102 || 10 ||
|| 110 || 3 || 111 || 4 || 112 || 5 ||
|| 120 || 11 || 121 || 11 || 122 || 8 ||
|| 200 || 6 || 201 || 2 || 202 || 5 ||
|| 210 || 6 || 211 || 7 || 212 || 8 ||
|| 220 || 12 || 221 || 12 || 222 || 13 ||

The contexts list the most recent symbol on the right.

Next, the frequencies are sorted in ascending order before reading each symbol. The sorting is entirely static, and the previous order never affects the new ordering. If `a`, `b` and `c` are the frequencies for 0, 1 and 2 respectively, the orderings will be:

|| *Condition 1* || *Condition 2* || *Condition 3* || Ordering ||
|| a<b || a<c || b<c || 012 ||
|| a<b || a<c || b>=c || 021 ||
|| a<b || a>=c ||  || 201 ||
|| a>=b || b<c || c<a || 120 ||
|| a>=b || b<c || c>=a || 102 ||
|| a>=b || b>= c ||  || 210 ||

Finally, each frequency is temporarily increased by one. These frequencies in this order are then used to read a ternary symbol from the range coder. For example, if the frequencies for 0, 1 and 2 are 10, 20 and 15, the ordering will be 021, and thus the input frequencies to the coder will be 11, 16 and 21, and if the result is the third symbol, the output ternary value will be 1.

All frequencies are intialized to 0 at the beginning of decoding.

=== Adjusting and renormalizing the ternary frequenceies ===

After reading a ternary symbol, the frequencies in the set used are adjusted. There are two different ways this can happen. This behaviour is controlled in part by a flag, which is set at intialization.

If the symbol read was a 0, and if is the context was 000, and the flag is cleared, a special case is triggered. In this case, the three frequencies are divided by 2, rounding down, and the frequency for the current symbol (which in this case is always 0) is increased by three. The flag is then set.

In the usual case, which happens if the conditions above are not met, the following happens:

  * If the symbol read was not 0, the flag is cleared.
  * The frequencies (including the added ones) are summed.
  * A limit is selected. If the flag is cleared, the limit is 128. If it is set, the limit is 4096.
  * If the sum of the frequencies exceeds the limit, the frequencies (not including the added ones) are halved, rounding down.
  * The frequency for the symbol read is increased by two.

=== Reading the larger values ===

If the ternary symbol was a 2, we need to read the actual value from the input stream. The value is encoded as two parts: The number of bits it contains, and the bits themselves. As the top bit will always be a 1, this is not transmitted.

==== Reading the high bit ====



==== Reading the lower bits ====

==== Bumping and renormalizing the frequencies ====

== Move-to-front coder ==

== BWT sorting ==